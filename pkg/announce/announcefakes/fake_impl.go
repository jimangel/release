/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by counterfeiter. DO NOT EDIT.
package announcefakes

import (
	"sync"
)

type FakeImpl struct {
	CreateStub        func(string, string, string) error
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
	}
	createReturns struct {
		result1 error
	}
	createReturnsOnCall map[int]struct {
		result1 error
	}
	GetGoVersionStub        func(string) (string, error)
	getGoVersionMutex       sync.RWMutex
	getGoVersionArgsForCall []struct {
		arg1 string
	}
	getGoVersionReturns struct {
		result1 string
		result2 error
	}
	getGoVersionReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	ReadChangelogFileStub        func(string) ([]byte, error)
	readChangelogFileMutex       sync.RWMutex
	readChangelogFileArgsForCall []struct {
		arg1 string
	}
	readChangelogFileReturns struct {
		result1 []byte
		result2 error
	}
	readChangelogFileReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeImpl) Create(arg1 string, arg2 string, arg3 string) error {
	fake.createMutex.Lock()
	ret, specificReturn := fake.createReturnsOnCall[len(fake.createArgsForCall)]
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.CreateStub
	fakeReturns := fake.createReturns
	fake.recordInvocation("Create", []interface{}{arg1, arg2, arg3})
	fake.createMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeImpl) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *FakeImpl) CreateCalls(stub func(string, string, string) error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = stub
}

func (fake *FakeImpl) CreateArgsForCall(i int) (string, string, string) {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	argsForCall := fake.createArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeImpl) CreateReturns(result1 error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeImpl) CreateReturnsOnCall(i int, result1 error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = nil
	if fake.createReturnsOnCall == nil {
		fake.createReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeImpl) GetGoVersion(arg1 string) (string, error) {
	fake.getGoVersionMutex.Lock()
	ret, specificReturn := fake.getGoVersionReturnsOnCall[len(fake.getGoVersionArgsForCall)]
	fake.getGoVersionArgsForCall = append(fake.getGoVersionArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetGoVersionStub
	fakeReturns := fake.getGoVersionReturns
	fake.recordInvocation("GetGoVersion", []interface{}{arg1})
	fake.getGoVersionMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeImpl) GetGoVersionCallCount() int {
	fake.getGoVersionMutex.RLock()
	defer fake.getGoVersionMutex.RUnlock()
	return len(fake.getGoVersionArgsForCall)
}

func (fake *FakeImpl) GetGoVersionCalls(stub func(string) (string, error)) {
	fake.getGoVersionMutex.Lock()
	defer fake.getGoVersionMutex.Unlock()
	fake.GetGoVersionStub = stub
}

func (fake *FakeImpl) GetGoVersionArgsForCall(i int) string {
	fake.getGoVersionMutex.RLock()
	defer fake.getGoVersionMutex.RUnlock()
	argsForCall := fake.getGoVersionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeImpl) GetGoVersionReturns(result1 string, result2 error) {
	fake.getGoVersionMutex.Lock()
	defer fake.getGoVersionMutex.Unlock()
	fake.GetGoVersionStub = nil
	fake.getGoVersionReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeImpl) GetGoVersionReturnsOnCall(i int, result1 string, result2 error) {
	fake.getGoVersionMutex.Lock()
	defer fake.getGoVersionMutex.Unlock()
	fake.GetGoVersionStub = nil
	if fake.getGoVersionReturnsOnCall == nil {
		fake.getGoVersionReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getGoVersionReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeImpl) ReadChangelogFile(arg1 string) ([]byte, error) {
	fake.readChangelogFileMutex.Lock()
	ret, specificReturn := fake.readChangelogFileReturnsOnCall[len(fake.readChangelogFileArgsForCall)]
	fake.readChangelogFileArgsForCall = append(fake.readChangelogFileArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.ReadChangelogFileStub
	fakeReturns := fake.readChangelogFileReturns
	fake.recordInvocation("ReadChangelogFile", []interface{}{arg1})
	fake.readChangelogFileMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeImpl) ReadChangelogFileCallCount() int {
	fake.readChangelogFileMutex.RLock()
	defer fake.readChangelogFileMutex.RUnlock()
	return len(fake.readChangelogFileArgsForCall)
}

func (fake *FakeImpl) ReadChangelogFileCalls(stub func(string) ([]byte, error)) {
	fake.readChangelogFileMutex.Lock()
	defer fake.readChangelogFileMutex.Unlock()
	fake.ReadChangelogFileStub = stub
}

func (fake *FakeImpl) ReadChangelogFileArgsForCall(i int) string {
	fake.readChangelogFileMutex.RLock()
	defer fake.readChangelogFileMutex.RUnlock()
	argsForCall := fake.readChangelogFileArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeImpl) ReadChangelogFileReturns(result1 []byte, result2 error) {
	fake.readChangelogFileMutex.Lock()
	defer fake.readChangelogFileMutex.Unlock()
	fake.ReadChangelogFileStub = nil
	fake.readChangelogFileReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeImpl) ReadChangelogFileReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.readChangelogFileMutex.Lock()
	defer fake.readChangelogFileMutex.Unlock()
	fake.ReadChangelogFileStub = nil
	if fake.readChangelogFileReturnsOnCall == nil {
		fake.readChangelogFileReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.readChangelogFileReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeImpl) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	fake.getGoVersionMutex.RLock()
	defer fake.getGoVersionMutex.RUnlock()
	fake.readChangelogFileMutex.RLock()
	defer fake.readChangelogFileMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeImpl) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
